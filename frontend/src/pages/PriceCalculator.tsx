import React, { useState, useEffect } from 'react';
import { useLanguage } from '../contexts/LanguageContext';
import { PriceCategory, PriceItem } from '../types';
import { priceAPI } from '../services/api';

const PriceCalculator: React.FC = () => {
  const { t } = useLanguage();
  const [categories, setCategories] = useState<PriceCategory[]>([]);
  const [items, setItems] = useState<PriceItem[]>([]);
  const [selectedCategory, setSelectedCategory] = useState<string | null>(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [showAddModal, setShowAddModal] = useState(false);
  const [showCategoryModal, setShowCategoryModal] = useState(false);
  const [showEditCategoryModal, setShowEditCategoryModal] = useState(false);
  const [showCategoryManagementModal, setShowCategoryManagementModal] = useState(false);
  const [showPriceModal, setPriceModalData] = useState<{ show: boolean; item?: PriceItem | null }>({ show: false, item: null });
  const [editingCategory, setEditingCategory] = useState<PriceCategory | null>(null);

  // ÏÉà Ìï≠Î™© Ï∂îÍ∞Ä Ìèº
  const [formData, setFormData] = useState({
    categoryId: '',
    name: '',
    unit: '',
    baseCost: 0,
    calculatedPrice: 0,
    description: ''
  });

  // Ìè¨Îß∑Îêú ÏûÖÎ†•Í∞í ÏÉÅÌÉú
  const [formattedBaseCost, setFormattedBaseCost] = useState('');

  // Í≥ÑÏÇ∞ ÏöîÏú® ÏÑ§Ï†ï
  const [calculationRates, setCalculationRates] = useState({
    pitRate: 10, // PIT ÏöîÏú® (%)
    profitRate: 30, // Í∏∞ÏóÖÏù¥Ïú§ ÏöîÏú® (%)
    vatRate: 8 // Î∂ÄÍ∞ÄÏÑ∏ ÏöîÏú® (%)
  });

  // Ïπ¥ÌÖåÍ≥†Î¶¨ Ï∂îÍ∞Ä Ìèº
  const [categoryFormData, setCategoryFormData] = useState({
    name: '',
    description: ''
  });

  // Ïπ¥ÌÖåÍ≥†Î¶¨ ÏàòÏ†ï Ìèº
  const [editCategoryFormData, setEditCategoryFormData] = useState({
    name: '',
    description: ''
  });

  // Îã®Í∞Ä ÏÑ§Ï†ï Ìèº
  const [priceFormData, setPriceFormData] = useState({
    baseCost: 0,
    calculatedPrice: 0
  });

  // Îã®Í∞Ä ÏÑ§Ï†ï ÌèºÏùò Ìè¨Îß∑Îêú ÏûÖÎ†•Í∞í
  const [formattedPriceBaseCost, setFormattedPriceBaseCost] = useState('');

  // Îã®Í∞Ä ÏàòÏ†ïÏãú ÏÇ¨Ïö©Ìï† ÏöîÏú®
  const [priceCalculationRates, setPriceCalculationRates] = useState({
    pitRate: 10,
    profitRate: 30,
    vatRate: 8
  });

  useEffect(() => {
    fetchData();
  }, []);

  // Ïà´ÏûêÎ•º Ï≤úÎã®ÏúÑ Ï†ê(.)ÏúºÎ°ú Íµ¨Î∂ÑÌïòÏó¨ Ìè¨Îß∑ÌåÖÌïòÎäî Ìï®Ïàò
  const formatNumber = (num: number): string => {
    return num.toString().replace(/\B(?=(\d{3})+(?!\d))/g, '.');
  };

  // ÏûÖÎ†•Í∞íÏùÑ Ï≤úÎã®ÏúÑ Ï†ê(.)ÏúºÎ°ú Ìè¨Îß∑ÌåÖÌïòÎäî Ìï®Ïàò
  const formatInputValue = (value: string): string => {
    const numValue = value.replace(/\./g, '');
    if (numValue === '' || isNaN(Number(numValue))) return '';
    return formatNumber(Number(numValue));
  };

  // Ìè¨Îß∑Îêú Î¨∏ÏûêÏó¥ÏùÑ Ïà´ÏûêÎ°ú Î≥ÄÌôòÌïòÎäî Ìï®Ïàò
  const parseFormattedNumber = (value: string): number => {
    return Number(value.replace(/\./g, '')) || 0;
  };

  // ÏõêÍ∞Ä Í∏∞Î∞ò ÌåêÎß§ Îã®Í∞Ä Í≥ÑÏÇ∞ Ìï®Ïàò (Î∂ÄÍ∞ÄÏÑ∏ Ìè¨Ìï® ÏµúÏ¢Ö Í∞ÄÍ≤©)
  const calculateSellingPrice = (baseCost: number, rates = calculationRates) => {
    // 1Îã®Í≥Ñ: ÏõêÍ∞ÄÏóê PIT Ï∂îÍ∞Ä
    const afterPIT = baseCost * (1 + rates.pitRate / 100);
    // 2Îã®Í≥Ñ: PIT Ï†ÅÏö© ÌõÑ Í∏àÏï°Ïóê Í∏∞ÏóÖÏù¥Ïú§ Ï∂îÍ∞Ä
    const afterProfit = afterPIT * (1 + rates.profitRate / 100);
    // 3Îã®Í≥Ñ: Í≥µÍ∏âÍ∞ÄÏï°Ïóê Î∂ÄÍ∞ÄÏÑ∏ Ï∂îÍ∞Ä
    const finalPrice = afterProfit * (1 + rates.vatRate / 100);

    // Ï≤úÎã®ÏúÑ Ïò¨Î¶º Ï≤òÎ¶¨
    return Math.ceil(finalPrice / 1000) * 1000;
  };

  // Î∂ÄÍ∞ÄÏÑ∏Î•º Ï†úÏô∏Ìïú ÏàúÎã®Í∞Ä Í≥ÑÏÇ∞ Ìï®Ïàò (Í≤¨Ï†ÅÏÑúÏóêÏÑú ÏÇ¨Ïö©)
  const calculateNetPrice = (baseCost: number, rates = calculationRates) => {
    // 1Îã®Í≥Ñ: ÏõêÍ∞ÄÏóê PIT Ï∂îÍ∞Ä
    const afterPIT = baseCost * (1 + rates.pitRate / 100);
    // 2Îã®Í≥Ñ: PIT Ï†ÅÏö© ÌõÑ Í∏àÏï°Ïóê Í∏∞ÏóÖÏù¥Ïú§ Ï∂îÍ∞Ä (Î∂ÄÍ∞ÄÏÑ∏ Ï†úÏô∏)
    const afterProfit = afterPIT * (1 + rates.profitRate / 100);

    // Ï≤úÎã®ÏúÑ Ïò¨Î¶º Ï≤òÎ¶¨ (Î∂ÄÍ∞ÄÏÑ∏ Ï†úÏô∏Ìïú ÏàúÎã®Í∞Ä)
    return Math.ceil(afterProfit / 1000) * 1000;
  };

  // ÏÉÅÏÑ∏ Í≥ÑÏÇ∞ Í≥ºÏ†ïÏùÑ Î∞òÌôòÌïòÎäî Ìï®Ïàò
  const getCalculationDetails = (baseCost: number, rates = calculationRates) => {
    const afterPIT = baseCost * (1 + rates.pitRate / 100);
    const pitAmount = afterPIT - baseCost;
    const afterProfit = afterPIT * (1 + rates.profitRate / 100);
    const profitAmount = afterProfit - afterPIT;
    const finalPrice = afterProfit * (1 + rates.vatRate / 100);
    const vatAmount = finalPrice - afterProfit;

    return {
      baseCost,
      pitRate: rates.pitRate,
      pitAmount,
      afterPIT,
      profitRate: rates.profitRate,
      profitAmount,
      afterProfit,
      vatRate: rates.vatRate,
      vatAmount,
      finalPrice: Math.ceil(finalPrice / 1000) * 1000
    };
  };

  const fetchData = async () => {
    try {
      setLoading(true);
      console.log('üìä Îã®Í∞Ä Í≥ÑÏÇ∞Í∏∞ Îç∞Ïù¥ÌÑ∞ Î°úÎî© ÏãúÏûë...');

      // Ïã§Ï†ú APIÏóêÏÑú Ïπ¥ÌÖåÍ≥†Î¶¨ÏôÄ Í∞ÄÍ≤© Ìï≠Î™© Îç∞Ïù¥ÌÑ∞ Í∞ÄÏ†∏Ïò§Í∏∞
      const [categoriesResponse, itemsResponse] = await Promise.all([
        priceAPI.getCategories({ page: 1, limit: 100 }),
        priceAPI.getItems({ page: 1, limit: 500 })
      ]);

      console.log('üìù Ïπ¥ÌÖåÍ≥†Î¶¨ API ÏùëÎãµ:', categoriesResponse);
      console.log('üè∑Ô∏è Í∞ÄÍ≤© Ìï≠Î™© API ÏùëÎãµ:', itemsResponse);

      // Ïπ¥ÌÖåÍ≥†Î¶¨ Îç∞Ïù¥ÌÑ∞ Ï≤òÎ¶¨
      if (categoriesResponse.success && categoriesResponse.data) {
        const categoriesData = categoriesResponse.data.categories || categoriesResponse.data;
        console.log('‚úÖ Ïπ¥ÌÖåÍ≥†Î¶¨ Î°úÎìú ÏÑ±Í≥µ:', categoriesData.length, 'Í∞ú');
        setCategories(Array.isArray(categoriesData) ? categoriesData : []);
      } else {
        console.log('‚ö†Ô∏è Ïπ¥ÌÖåÍ≥†Î¶¨ APIÏóêÏÑú Îπà ÏùëÎãµ ÎòêÎäî Ïò§Î•ò');
        setCategories([]);
      }

      // Í∞ÄÍ≤© Ìï≠Î™© Îç∞Ïù¥ÌÑ∞ Ï≤òÎ¶¨
      if (itemsResponse.success && itemsResponse.data) {
        const itemsData = itemsResponse.data.items || itemsResponse.data;
        console.log('‚úÖ Í∞ÄÍ≤© Ìï≠Î™© Î°úÎìú ÏÑ±Í≥µ:', itemsData.length, 'Í∞ú');

        // Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ Íµ¨Ï°∞Ïóê ÎßûÍ≤å Î≥ÄÌôò
        const transformedItems = itemsData.map((item: any) => {
          let baseCost = item.baseCost || 0;
          // Í∏∞Ï°¥ Îç∞Ïù¥ÌÑ∞Ïóê baseCostÍ∞Ä ÏóÜÏúºÎ©¥ Ïó≠ÏÇ∞ÏúºÎ°ú Ï∂îÏ†ï
          if (baseCost === 0 && item.unitPrice > 0) {
            // ÌòÑÏû¨ Îã®Í∞ÄÍ∞Ä Î∂ÄÍ∞ÄÏÑ∏ Ìè¨Ìï® Í∞ÄÍ≤©Ïù¥ÎùºÍ≥† Í∞ÄÏ†ïÌïòÍ≥† Ïó≠ÏÇ∞
            // unitPrice = baseCost * 1.1 * 1.3 * 1.08 (PIT 10% + Í∏∞ÏóÖÏù¥Ïú§ 30% + VAT 8%)
            baseCost = Math.round(item.unitPrice / (1.1 * 1.3 * 1.08));
          }

          return {
            id: item.id,
            categoryId: item.categoryId,
            name: item.itemName,
            unitPrice: item.unitPrice,
            unit: item.unit || 'Í∞ú',
            description: item.description || '',
            baseCost: baseCost
          };
        });

        setItems(transformedItems);
      } else {
        console.log('‚ö†Ô∏è Í∞ÄÍ≤© Ìï≠Î™© APIÏóêÏÑú Îπà ÏùëÎãµ ÎòêÎäî Ïò§Î•ò');
        setItems([]);
      }

      console.log('üéâ Îã®Í∞Ä Í≥ÑÏÇ∞Í∏∞ Îç∞Ïù¥ÌÑ∞ Î°úÎìú ÏôÑÎ£å');
    } catch (err) {
      console.error('‚ùå Îã®Í∞Ä Í≥ÑÏÇ∞Í∏∞ Îç∞Ïù¥ÌÑ∞ Î°úÎìú Ïã§Ìå®:', err);
      setError(t('priceCalculator.errorLoadingData'));
    } finally {
      setLoading(false);
    }
  };

  const filteredItems = selectedCategory
    ? items.filter(item => item.categoryId === selectedCategory)
    : items;

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();

    if (!formData.categoryId) {
      setError(t('priceCalculator.errorSelectCategory'));
      return;
    }
    if (!formData.name.trim()) {
      setError(t('priceCalculator.errorEnterTaskName'));
      return;
    }
    if (!formData.unit.trim()) {
      setError(t('priceCalculator.errorEnterUnit'));
      return;
    }
    if (formData.baseCost <= 0) {
      setError(t('priceCalculator.errorBaseCostGreaterThanZero'));
      return;
    }

    try {
      console.log('üìù ÏÉà Í∞ÄÍ≤© Ìï≠Î™© Ï∂îÍ∞Ä ÏãúÏûë...');
      const calculatedPrice = calculateNetPrice(formData.baseCost); // Î∂ÄÍ∞ÄÏÑ∏ Ï†úÏô∏ ÏàúÎã®Í∞Ä ÏÇ¨Ïö©

      // Ïã§Ï†ú APIÎ°ú Í∞ÄÍ≤© Ìï≠Î™© ÏÉùÏÑ±
      const createResponse = await priceAPI.createItem({
        categoryId: formData.categoryId,
        itemName: formData.name.trim(),
        unit: formData.unit.trim(),
        unitPrice: calculatedPrice,
        baseCost: formData.baseCost,
        description: formData.description.trim(),
        isActive: true
      });

      if (createResponse.success && createResponse.data) {
        console.log('‚úÖ Í∞ÄÍ≤© Ìï≠Î™© ÏÉùÏÑ± ÏÑ±Í≥µ:', createResponse.data);

        // Î°úÏª¨ ÏÉÅÌÉú ÏóÖÎç∞Ïù¥Ìä∏
        const newItem = {
          id: createResponse.data.id,
          categoryId: formData.categoryId,
          name: formData.name.trim(),
          unit: formData.unit.trim(),
          unitPrice: calculatedPrice,
          baseCost: formData.baseCost,
          description: formData.description.trim()
        };

        setItems([...items, newItem]);
        setShowAddModal(false);
        setFormData({ categoryId: '', name: '', unit: '', baseCost: 0, calculatedPrice: 0, description: '' });

        setError(`‚úÖ "${newItem.name}" ÏûëÏóÖÏù¥ ÏÑ±Í≥µÏ†ÅÏúºÎ°ú Ï∂îÍ∞ÄÎêòÏóàÏäµÎãàÎã§! Îã®Í∞Ä: ${formatNumber(calculatedPrice)} VND`);
        setTimeout(() => setError(null), 3000);
      } else {
        console.error('‚ùå Í∞ÄÍ≤© Ìï≠Î™© ÏÉùÏÑ± Ïã§Ìå®:', createResponse);
        setError(t('priceCalculator.errorAddingTask'));
      }
    } catch (err) {
      console.error('‚ùå Í∞ÄÍ≤© Ìï≠Î™© Ï∂îÍ∞Ä Ïò§Î•ò:', err);
      setError(t('priceCalculator.errorAddingTask'));
    }
  };

  const handleCategorySubmit = async (e: React.FormEvent) => {
    e.preventDefault();

    if (!categoryFormData.name.trim()) {
      setError(t('priceCalculator.errorEnterCategoryName'));
      return;
    }

    try {
      console.log('üìÅ ÏÉà Ïπ¥ÌÖåÍ≥†Î¶¨ Ï∂îÍ∞Ä ÏãúÏûë...');

      // Ïã§Ï†ú APIÎ°ú Ïπ¥ÌÖåÍ≥†Î¶¨ ÏÉùÏÑ±
      const createResponse = await priceAPI.createCategory({
        name: categoryFormData.name.trim(),
        description: categoryFormData.description.trim()
      });

      if (createResponse.success && createResponse.data) {
        console.log('‚úÖ Ïπ¥ÌÖåÍ≥†Î¶¨ ÏÉùÏÑ± ÏÑ±Í≥µ:', createResponse.data);

        const newCategory = {
          id: createResponse.data.id,
          name: createResponse.data.name,
          description: createResponse.data.description || ''
        };

        setCategories([...categories, newCategory]);
        setShowCategoryModal(false);
        setCategoryFormData({ name: '', description: '' });

        // ÏÉà ÏûëÏóÖ Ï∂îÍ∞ÄÏóêÏÑú Ìò∏Ï∂úÎêú Í≤ΩÏö∞ÏóêÎßå categoryId ÏÑ§Ï†ï
        if (showAddModal) {
          setFormData({ ...formData, categoryId: newCategory.id });
        }

        setError(`‚úÖ "${newCategory.name}" Ïπ¥ÌÖåÍ≥†Î¶¨Í∞Ä ÏÑ±Í≥µÏ†ÅÏúºÎ°ú Ï∂îÍ∞ÄÎêòÏóàÏäµÎãàÎã§!`);
        setTimeout(() => setError(null), 3000);
      } else {
        console.error('‚ùå Ïπ¥ÌÖåÍ≥†Î¶¨ ÏÉùÏÑ± Ïã§Ìå®:', createResponse);
        setError(t('priceCalculator.errorAddingCategory'));
      }
    } catch (err) {
      console.error('‚ùå Ïπ¥ÌÖåÍ≥†Î¶¨ Ï∂îÍ∞Ä Ïò§Î•ò:', err);
      setError(t('priceCalculator.errorAddingCategory'));
    }
  };

  const handlePriceUpdate = (item: PriceItem) => {
    // Ï†ÄÏû•Îêú baseCostÍ∞Ä ÏûàÏúºÎ©¥ ÏÇ¨Ïö©ÌïòÍ≥†, ÏóÜÏúºÎ©¥ Ïó≠ÏÇ∞ÏúºÎ°ú Ï∂îÏ†ï
    let baseCost = item.baseCost || 0;
    if (baseCost === 0 && item.unitPrice > 0) {
      // ÌòÑÏû¨ Îã®Í∞ÄÍ∞Ä Î∂ÄÍ∞ÄÏÑ∏ Ìè¨Ìï® Í∞ÄÍ≤©Ïù¥ÎùºÍ≥† Í∞ÄÏ†ïÌïòÍ≥† Ïó≠ÏÇ∞
      // unitPrice = baseCost * 1.1 * 1.3 * 1.08 (PIT 10% + Í∏∞ÏóÖÏù¥Ïú§ 30% + VAT 8%)
      baseCost = Math.round(item.unitPrice / (1.1 * 1.3 * 1.08));
    }

    // Í≤¨Ï†ÅÏÑúÏóêÏÑú ÏÇ¨Ïö©Ìï† Î∂ÄÍ∞ÄÏÑ∏ Ï†úÏô∏ ÏàúÎã®Í∞ÄÎ°ú ÏÑ§Ï†ï
    const netPrice = calculateNetPrice(baseCost, { pitRate: 10, profitRate: 30, vatRate: 8 });
    setPriceFormData({ baseCost, calculatedPrice: netPrice });
    setFormattedPriceBaseCost(baseCost > 0 ? formatNumber(baseCost) : '');
    // Í∏∞Î≥∏ ÏöîÏú®Î°ú Ï¥àÍ∏∞Ìôî
    setPriceCalculationRates({ pitRate: 10, profitRate: 30, vatRate: 8 });
    setPriceModalData({ show: true, item });
  };

  const handlePriceSubmit = async (e: React.FormEvent) => {
    e.preventDefault();

    if (!showPriceModal.item) return;

    try {
      console.log('üí∞ Í∞ÄÍ≤© Ìï≠Î™© ÏóÖÎç∞Ïù¥Ìä∏ ÏãúÏûë...');
      const calculatedPrice = calculateNetPrice(priceFormData.baseCost, priceCalculationRates); // Î∂ÄÍ∞ÄÏÑ∏ Ï†úÏô∏ ÏàúÎã®Í∞Ä ÏÇ¨Ïö©

      // Ïã§Ï†ú APIÎ°ú Í∞ÄÍ≤© Ìï≠Î™© ÏóÖÎç∞Ïù¥Ìä∏
      const updateResponse = await priceAPI.updateItem(showPriceModal.item.id, {
        unitPrice: calculatedPrice,
        baseCost: priceFormData.baseCost
      });

      if (updateResponse.success && updateResponse.data) {
        console.log('‚úÖ Í∞ÄÍ≤© Ìï≠Î™© ÏóÖÎç∞Ïù¥Ìä∏ ÏÑ±Í≥µ:', updateResponse.data);

        // Î°úÏª¨ ÏÉÅÌÉú ÏóÖÎç∞Ïù¥Ìä∏
        const updatedItems = items.map(item =>
          item.id === showPriceModal.item!.id
            ? { ...item, baseCost: priceFormData.baseCost, unitPrice: calculatedPrice }
            : item
        );

        setItems(updatedItems);
        setPriceModalData({ show: false, item: null });

        setError(`‚úÖ "${showPriceModal.item.name}" Îã®Í∞ÄÍ∞Ä ÏóÖÎç∞Ïù¥Ìä∏ÎêòÏóàÏäµÎãàÎã§! ÏÉà Îã®Í∞Ä: ${formatNumber(calculatedPrice)} VND`);
        setTimeout(() => setError(null), 3000);
      } else {
        console.error('‚ùå Í∞ÄÍ≤© Ìï≠Î™© ÏóÖÎç∞Ïù¥Ìä∏ Ïã§Ìå®:', updateResponse);
        setError(t('priceCalculator.errorUpdatingPrice'));
      }
    } catch (err) {
      console.error('‚ùå Í∞ÄÍ≤© Ìï≠Î™© ÏóÖÎç∞Ïù¥Ìä∏ Ïò§Î•ò:', err);
      setError(t('priceCalculator.errorUpdatingPrice'));
    }
  };

  const handleEditCategory = (category: PriceCategory) => {
    setEditingCategory(category);
    setEditCategoryFormData({
      name: category.name,
      description: category.description || ''
    });
    setShowEditCategoryModal(true);
  };

  const handleEditCategorySubmit = async (e: React.FormEvent) => {
    e.preventDefault();

    if (!editingCategory) return;

    if (!editCategoryFormData.name.trim()) {
      setError(t('priceCalculator.errorEnterCategoryName'));
      return;
    }

    try {
      console.log('üìÅ Ïπ¥ÌÖåÍ≥†Î¶¨ ÏàòÏ†ï ÏãúÏûë...', editingCategory.id);

      // Ïã§Ï†ú APIÎ°ú Ïπ¥ÌÖåÍ≥†Î¶¨ ÏóÖÎç∞Ïù¥Ìä∏
      const updateResponse = await priceAPI.updateCategory(editingCategory.id, {
        name: editCategoryFormData.name.trim(),
        description: editCategoryFormData.description.trim()
      });

      if (updateResponse.success && updateResponse.data) {
        console.log('‚úÖ Ïπ¥ÌÖåÍ≥†Î¶¨ ÏàòÏ†ï ÏÑ±Í≥µ:', updateResponse.data);

        const updatedCategory = {
          ...editingCategory,
          name: updateResponse.data.name,
          description: updateResponse.data.description || ''
        };

        const updatedCategories = categories.map(category =>
          category.id === editingCategory.id ? updatedCategory : category
        );

        setCategories(updatedCategories);
        setShowEditCategoryModal(false);
        setEditingCategory(null);
        setEditCategoryFormData({ name: '', description: '' });

        setError(`‚úÖ "${updatedCategory.name}" Ïπ¥ÌÖåÍ≥†Î¶¨Í∞Ä ÏÑ±Í≥µÏ†ÅÏúºÎ°ú ÏàòÏ†ïÎêòÏóàÏäµÎãàÎã§!`);
        setTimeout(() => setError(null), 3000);
      } else {
        console.error('‚ùå Ïπ¥ÌÖåÍ≥†Î¶¨ ÏàòÏ†ï Ïã§Ìå®:', updateResponse);
        setError(t('priceCalculator.errorUpdatingCategory'));
      }
    } catch (err) {
      console.error('‚ùå Ïπ¥ÌÖåÍ≥†Î¶¨ ÏàòÏ†ï Ïò§Î•ò:', err);
      setError(t('priceCalculator.errorUpdatingCategory'));
    }
  };

  const handleDeleteCategory = async (category: PriceCategory) => {
    if (window.confirm(`"${category.name}" Ïπ¥ÌÖåÍ≥†Î¶¨Î•º ÏÇ≠Ï†úÌïòÏãúÍ≤†ÏäµÎãàÍπå?\nÏù¥ Ïπ¥ÌÖåÍ≥†Î¶¨Ïóê ÏÜçÌïú Î™®Îì† ÏûëÏóÖÎèÑ Ìï®Íªò ÏÇ≠Ï†úÎê©ÎãàÎã§.`)) {
      try {
        console.log('üóëÔ∏è Ïπ¥ÌÖåÍ≥†Î¶¨ ÏÇ≠Ï†ú ÏãúÏûë...', category.id);

        // Ïã§Ï†ú APIÎ°ú Ïπ¥ÌÖåÍ≥†Î¶¨ ÏÇ≠Ï†ú
        const deleteResponse = await priceAPI.deleteCategory(category.id);

        if (deleteResponse.success) {
          console.log('‚úÖ Ïπ¥ÌÖåÍ≥†Î¶¨ ÏÇ≠Ï†ú ÏÑ±Í≥µ');

          // Î°úÏª¨ ÏÉÅÌÉúÏóêÏÑú Ïπ¥ÌÖåÍ≥†Î¶¨Ïóê ÏÜçÌïú ÏûëÏóÖÎì§Í≥º Ïπ¥ÌÖåÍ≥†Î¶¨ Ï†úÍ±∞
          const updatedItems = items.filter(item => item.categoryId !== category.id);
          const updatedCategories = categories.filter(cat => cat.id !== category.id);

          setItems(updatedItems);
          setCategories(updatedCategories);

          // ÏÇ≠Ï†úÎêú Ïπ¥ÌÖåÍ≥†Î¶¨Í∞Ä ÏÑ†ÌÉùÎêòÏñ¥ ÏûàÏóàÎã§Î©¥ Ï†ÑÏ≤¥ Ïπ¥ÌÖåÍ≥†Î¶¨Î°ú Î≥ÄÍ≤Ω
          if (selectedCategory === category.id) {
            setSelectedCategory(null);
          }

          setError(`‚úÖ "${category.name}" Ïπ¥ÌÖåÍ≥†Î¶¨Í∞Ä ÏÇ≠Ï†úÎêòÏóàÏäµÎãàÎã§.`);
          setTimeout(() => setError(null), 3000);
        } else {
          console.error('‚ùå Ïπ¥ÌÖåÍ≥†Î¶¨ ÏÇ≠Ï†ú Ïã§Ìå®:', deleteResponse);
          setError(t('priceCalculator.errorDeletingCategory'));
        }
      } catch (err) {
        console.error('‚ùå Ïπ¥ÌÖåÍ≥†Î¶¨ ÏÇ≠Ï†ú Ïò§Î•ò:', err);
        setError(t('priceCalculator.errorDeletingCategory'));
      }
    }
  };

  const handleDeleteItem = async (item: any) => {
    if (window.confirm(`"${item.name}" ÏûëÏóÖÏùÑ ÏÇ≠Ï†úÌïòÏãúÍ≤†ÏäµÎãàÍπå?`)) {
      try {
        console.log('üóëÔ∏è Í∞ÄÍ≤© Ìï≠Î™© ÏÇ≠Ï†ú ÏãúÏûë...', item.id);

        // Ïã§Ï†ú APIÎ°ú Í∞ÄÍ≤© Ìï≠Î™© ÏÇ≠Ï†ú
        const deleteResponse = await priceAPI.deleteItem(item.id);

        if (deleteResponse.success) {
          console.log('‚úÖ Í∞ÄÍ≤© Ìï≠Î™© ÏÇ≠Ï†ú ÏÑ±Í≥µ');

          // Î°úÏª¨ ÏÉÅÌÉúÏóêÏÑú Ï†úÍ±∞
          const updatedItems = items.filter(i => i.id !== item.id);
          setItems(updatedItems);

          setError(`‚úÖ "${item.name}" ÏûëÏóÖÏù¥ ÏÇ≠Ï†úÎêòÏóàÏäµÎãàÎã§.`);
          setTimeout(() => setError(null), 3000);
        } else {
          console.error('‚ùå Í∞ÄÍ≤© Ìï≠Î™© ÏÇ≠Ï†ú Ïã§Ìå®:', deleteResponse);
          setError(t('priceCalculator.errorDeletingTask'));
        }
      } catch (err) {
        console.error('‚ùå Í∞ÄÍ≤© Ìï≠Î™© ÏÇ≠Ï†ú Ïò§Î•ò:', err);
        setError(t('priceCalculator.errorDeletingTask'));
      }
    }
  };

  // ÏõêÍ∞Ä ÏûÖÎ†•Ïãú Ïã§ÏãúÍ∞Ñ ÌåêÎß§Í∞Ä Í≥ÑÏÇ∞
  useEffect(() => {
    if (formData.baseCost > 0) {
      setFormData(prev => ({ ...prev, calculatedPrice: calculateSellingPrice(prev.baseCost, calculationRates) }));
    }
  }, [formData.baseCost, calculationRates.pitRate, calculationRates.profitRate, calculationRates.vatRate]);

  useEffect(() => {
    if (priceFormData.baseCost > 0) {
      setPriceFormData(prev => ({ ...prev, calculatedPrice: calculateSellingPrice(prev.baseCost, priceCalculationRates) }));
    }
  }, [priceFormData.baseCost, priceCalculationRates.pitRate, priceCalculationRates.profitRate, priceCalculationRates.vatRate]);

  if (loading) {
    return (
      <div className="flex justify-center items-center h-64">
        <div className="text-lg">{t('priceCalculator.loading')}</div>
      </div>
    );
  }

  return (
    <div className="p-6">
      <div className="flex justify-between items-center mb-6">
        <div>
          <h1 className="text-2xl font-bold text-gray-800">{t('priceCalculator.title')}</h1>
          <p className="text-sm text-gray-600 mt-1">{t('priceCalculator.subtitle')}</p>
        </div>
        <div className="flex space-x-3">
          <button
            onClick={() => setShowAddModal(true)}
            className="bg-blue-500 hover:bg-blue-600 text-white px-4 py-2 rounded-lg transition-colors shadow-md hover:shadow-lg font-medium flex items-center space-x-2"
          >
            <span>‚ûï</span>
            <span>{t('priceCalculator.addNewTask')}</span>
          </button>
        </div>
      </div>

      {error && (
        <div className={`border px-4 py-3 rounded mb-4 ${
          error.includes('‚úÖ')
            ? 'bg-green-100 border-green-400 text-green-700'
            : 'bg-red-100 border-red-400 text-red-700'
        }`}>
          {error}
        </div>
      )}

      <div className="grid grid-cols-1 lg:grid-cols-4 gap-6">
        {/* ÏôºÏ™Ω: Ïπ¥ÌÖåÍ≥†Î¶¨ Î™©Î°ù */}
        <div className="bg-blue-50 rounded-lg shadow p-6">
          <div className="flex justify-between items-center mb-4">
            <h2 className="text-lg font-semibold">{t('priceCalculator.taskCategories')}</h2>
            <button
              onClick={() => setShowCategoryManagementModal(true)}
              className="bg-blue-500 hover:bg-blue-600 text-white px-3 py-1 rounded-lg text-sm transition-colors flex items-center space-x-1"
            >
              <span>‚öôÔ∏è</span>
              <span>{t('priceCalculator.management')}</span>
            </button>
          </div>

          <div className="space-y-2">
            {/* Ïπ¥ÌÖåÍ≥†Î¶¨Î•º 4Í∞úÏî© Í∑∏Î¶¨ÎìúÎ°ú Î∞∞Ïπò */}
            <div className="grid grid-cols-2 xl:grid-cols-4 gap-2">
              {categories.map(category => (
                <button
                  key={category.id}
                  onClick={() => setSelectedCategory(category.id)}
                  className={`text-left px-3 py-2 rounded-md transition-colors ${
                    selectedCategory === category.id
                      ? 'bg-blue-500 text-white'
                      : 'bg-white hover:bg-gray-50 border border-gray-200'
                  }`}
                >
                  <div className="font-medium text-sm">{category.name}</div>
                  <div className="text-xs opacity-75 truncate">{category.description}</div>
                </button>
              ))}
            </div>
          </div>
        </div>

        {/* Ïò§Î•∏Ï™Ω: ÏûëÏóÖ Î™©Î°ù */}
        <div className="lg:col-span-3 bg-blue-50 rounded-lg shadow p-6">
          <div className="flex justify-between items-center mb-4">
            <h2 className="text-lg font-semibold">
              {selectedCategory
                ? categories.find(c => c.id === selectedCategory)?.name + ' ' + t('priceCalculator.taskList')
                : t('priceCalculator.allTasksList')
              }
            </h2>
            <div className="text-sm text-gray-600">
              {t('priceCalculator.totalTasks')} {filteredItems.length}{t('priceCalculator.tasks')}
            </div>
          </div>

          {filteredItems.length === 0 ? (
            <div className="text-center text-gray-500 py-8">
              {t('priceCalculator.noTasksInCategory')}
            </div>
          ) : (
            <div className="space-y-2">
              {filteredItems.map(item => (
                <div key={item.id} className="bg-white rounded-lg border border-gray-200 p-3">
                  <div className="flex items-center justify-between">
                    <div className="flex items-center space-x-4 flex-1">
                      <div className="min-w-0 flex-1">
                        <div className="flex items-center space-x-2">
                          <h3 className="font-semibold text-gray-900 truncate">{item.name}</h3>
                          <span className="px-2 py-1 bg-blue-100 text-blue-600 text-xs rounded shrink-0">
                            {categories.find(c => c.id === item.categoryId)?.name}
                          </span>
                        </div>
                        {item.description && (
                          <p className="text-sm text-gray-600 truncate">{item.description}</p>
                        )}
                      </div>
                      <div className="text-sm">
                        <span className="text-gray-400">{t('priceCalculator.baseCostLabel')}</span>
                        <span className="text-red-600 font-medium ml-1">{formatNumber(item.baseCost || 0)} VND</span>
                      </div>
                      <div className="text-sm">
                        <span className="text-gray-400">{t('priceCalculator.sellingLabel')}</span>
                        <span className="text-green-600 font-bold ml-1">{formatNumber(item.unitPrice)} VND</span>
                      </div>
                    </div>
                    <div className="flex items-center space-x-2 ml-4 shrink-0">
                      <button
                        onClick={() => handlePriceUpdate(item)}
                        className="bg-blue-500 hover:bg-blue-600 text-white px-3 py-1 rounded text-sm transition-colors"
                      >
                        {t('priceCalculator.editUnitPrice')}
                      </button>
                      <button
                        onClick={() => handleDeleteItem(item)}
                        className="bg-red-500 hover:bg-red-600 text-white px-3 py-1 rounded text-sm transition-colors"
                        title={t('priceCalculator.deleteTask')}
                      >
                        üóëÔ∏è
                      </button>
                    </div>
                  </div>
                </div>
              ))}
            </div>
          )}
        </div>
      </div>

      {/* ÏÉà ÏûëÏóÖ Ï∂îÍ∞Ä ÌåùÏóÖ Î™®Îã¨ */}
      {showAddModal && (
        <div className="fixed inset-0 bg-black bg-opacity-60 overflow-y-auto h-full w-full z-50 flex items-center justify-center">
          <div className="relative mx-auto p-8 border w-[650px] shadow-2xl rounded-xl bg-white animate-in">
            <div className="flex justify-between items-center mb-8">
              <div className="flex items-center space-x-3">
                <div className="w-10 h-10 bg-blue-500 rounded-full flex items-center justify-center">
                  <span className="text-white text-xl">‚ûï</span>
                </div>
                <div>
                  <h3 className="text-2xl font-bold text-gray-900">{t('priceCalculator.addTask')}</h3>
                  <p className="text-sm text-gray-600">{t('priceCalculator.addTaskDescription')}</p>
                </div>
              </div>
              <button
                onClick={() => {
                  setShowAddModal(false);
                  setFormData({ categoryId: '', name: '', unit: '', baseCost: 0, calculatedPrice: 0, description: '' });
                  setFormattedBaseCost('');
                  setError(null);
                }}
                className="text-gray-400 hover:text-gray-600 hover:bg-gray-100 rounded-full p-2 transition-all"
              >
                <span className="text-2xl">√ó</span>
              </button>
            </div>

            <form onSubmit={handleSubmit} className="space-y-4">
              <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                <div className="md:col-span-2">
                  <div className="mb-2">
                    <label className="block text-sm font-medium text-gray-700">
                      {t('priceCalculator.categoryRequired')}
                    </label>
                  </div>
                  <select
                    required
                    value={formData.categoryId}
                    onChange={(e) => setFormData({ ...formData, categoryId: e.target.value })}
                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-all"
                  >
                    <option value="">{t('priceCalculator.selectCategory')}</option>
                    {categories.map(category => (
                      <option key={category.id} value={category.id}>
                        {category.name}
                      </option>
                    ))}
                  </select>
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    {t('priceCalculator.unitRequired')}
                  </label>
                  <input
                    type="text"
                    required
                    value={formData.unit}
                    onChange={(e) => setFormData({ ...formData, unit: e.target.value })}
                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-all"
                    placeholder={t('priceCalculator.unitPlaceholder')}
                  />
                </div>
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  {t('priceCalculator.taskNameRequired')}
                </label>
                <input
                  type="text"
                  required
                  value={formData.name}
                  onChange={(e) => setFormData({ ...formData, name: e.target.value })}
                  className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  placeholder={t('priceCalculator.taskNamePlaceholder')}
                />
              </div>

              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    {t('priceCalculator.baseCostRequired')}
                  </label>
                  <div className="relative">
                    <input
                      type="text"
                      required
                      value={formattedBaseCost}
                      onChange={(e) => {
                        const formatted = formatInputValue(e.target.value);
                        setFormattedBaseCost(formatted);
                        setFormData({ ...formData, baseCost: parseFormattedNumber(formatted) });
                      }}
                      className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-red-500 focus:border-red-500 transition-all bg-red-50"
                      placeholder="850.000"
                    />
                  </div>
                  {formData.baseCost > 0 && (
                    <div className="text-xs text-red-600 mt-2">
                      {formatNumber(formData.baseCost)} VND ({t('priceCalculator.baseCostTag')})
                    </div>
                  )}
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    {t('priceCalculator.calculatedSellingPrice')}
                  </label>
                  <div className="relative">
                    <input
                      type="text"
                      value={formatNumber(formData.calculatedPrice)}
                      readOnly
                      className="w-full px-3 py-2 border border-green-200 rounded-lg bg-green-50 text-green-700 font-bold focus:outline-none"
                    />
                  </div>
                  {formData.calculatedPrice > 0 && (
                    <div className="text-xs text-green-600 mt-2">
                      {formatNumber(formData.calculatedPrice)} VND ({t('priceCalculator.autoCalculated')})
                    </div>
                  )}
                </div>
              </div>

              {/* ÏöîÏú® ÏÑ§Ï†ï */}
              <div className="bg-blue-50 p-4 rounded-lg border border-blue-200">
                <div className="font-medium text-blue-800 mb-3">{t('priceCalculator.calculationRates')}</div>
                <div className="grid grid-cols-3 gap-3">
                  <div>
                    <label className="block text-xs font-medium text-blue-700 mb-1">{t('priceCalculator.pitRate')}</label>
                    <input
                      type="number"
                      min="0"
                      max="100"
                      step="0.1"
                      value={calculationRates.pitRate}
                      onChange={(e) => setCalculationRates({...calculationRates, pitRate: parseFloat(e.target.value) || 0})}
                      className="w-full px-2 py-1 text-sm border border-blue-300 rounded focus:outline-none focus:ring-1 focus:ring-blue-500"
                    />
                  </div>
                  <div>
                    <label className="block text-xs font-medium text-blue-700 mb-1">{t('priceCalculator.profitRate')}</label>
                    <input
                      type="number"
                      min="0"
                      max="100"
                      step="0.1"
                      value={calculationRates.profitRate}
                      onChange={(e) => setCalculationRates({...calculationRates, profitRate: parseFloat(e.target.value) || 0})}
                      className="w-full px-2 py-1 text-sm border border-blue-300 rounded focus:outline-none focus:ring-1 focus:ring-blue-500"
                    />
                  </div>
                  <div>
                    <label className="block text-xs font-medium text-blue-700 mb-1">{t('priceCalculator.vatRate')}</label>
                    <input
                      type="number"
                      min="0"
                      max="100"
                      step="0.1"
                      value={calculationRates.vatRate}
                      onChange={(e) => setCalculationRates({...calculationRates, vatRate: parseFloat(e.target.value) || 0})}
                      className="w-full px-2 py-1 text-sm border border-blue-300 rounded focus:outline-none focus:ring-1 focus:ring-blue-500"
                    />
                  </div>
                </div>
              </div>

              {formData.baseCost > 0 && (
                <div className="bg-yellow-50 p-4 rounded-lg border border-yellow-200">
                  <div className="text-sm text-yellow-800">
                    <div className="font-medium mb-2">{t('priceCalculator.detailedCalculation')}</div>
                    {(() => {
                      const details = getCalculationDetails(formData.baseCost);
                      return (
                        <div className="space-y-1">
                          <div>{t('priceCalculator.step1BaseCost')} <strong>{formatNumber(details.baseCost)} VND</strong></div>
                          <div className="ml-4 text-xs">{t('priceCalculator.pitApplied')} {details.pitRate}%: +{formatNumber(Math.round(details.pitAmount))} VND</div>
                          <div>{t('priceCalculator.step2AfterPIT')} <strong>{formatNumber(Math.round(details.afterPIT))} VND</strong></div>
                          <div className="ml-4 text-xs">{t('priceCalculator.profitApplied')} {details.profitRate}%: +{formatNumber(Math.round(details.profitAmount))} VND</div>
                          <div>{t('priceCalculator.step3AfterProfit')} <strong>{formatNumber(Math.round(details.afterProfit))} VND</strong></div>
                          <div className="ml-4 text-xs">{t('priceCalculator.vatApplied')} {details.vatRate}%: +{formatNumber(Math.round(details.vatAmount))} VND</div>
                          <div className="border-t pt-1 mt-2">
                            <div>{t('priceCalculator.step4FinalPrice')} <strong className="text-green-600">{formatNumber(details.finalPrice)} VND</strong></div>
                            <div className="text-blue-600 mt-1">{t('priceCalculator.quotationUnitPrice')} <strong>{formatNumber(Math.round(details.afterProfit))} VND</strong></div>
                          </div>
                        </div>
                      );
                    })()}
                  </div>
                </div>
              )}

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  {t('priceCalculator.taskDescription')}
                </label>
                <textarea
                  value={formData.description}
                  onChange={(e) => setFormData({ ...formData, description: e.target.value })}
                  rows={3}
                  className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  placeholder={t('priceCalculator.taskDescriptionPlaceholder')}
                />
              </div>

              <div className="flex justify-end space-x-4 pt-6 border-t border-gray-200">
                <button
                  type="button"
                  onClick={() => {
                    setShowAddModal(false);
                    setFormData({ categoryId: '', name: '', unit: '', baseCost: 0, calculatedPrice: 0, description: '' });
                    setFormattedBaseCost('');
                    setError(null);
                  }}
                  className="px-6 py-3 bg-gray-200 text-gray-700 rounded-lg hover:bg-gray-300 transition-all font-medium"
                >
                  {t('priceCalculator.cancel')}
                </button>
                <button
                  type="submit"
                  className="px-8 py-3 bg-blue-500 text-white rounded-lg hover:bg-blue-600 transition-all flex items-center space-x-2 font-medium shadow-lg hover:shadow-xl"
                >
                  <span>üíæ</span>
                  <span>{t('priceCalculator.saveTask')}</span>
                </button>
              </div>
            </form>
          </div>
        </div>
      )}

      {/* Ïπ¥ÌÖåÍ≥†Î¶¨ Ï∂îÍ∞Ä Î™®Îã¨ */}
      {showCategoryModal && (
        <div className="fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full z-50">
          <div className="relative top-20 mx-auto p-6 border w-[400px] shadow-lg rounded-md bg-blue-50">
            <div className="flex justify-between items-center mb-6">
              <h3 className="text-xl font-semibold text-gray-900">
                {t('priceCalculator.addNewCategory')}
              </h3>
              <button
                onClick={() => {
                  setShowCategoryModal(false);
                  setCategoryFormData({ name: '', description: '' });
                  setError(null);
                }}
                className="text-gray-400 hover:text-gray-600 text-2xl"
              >
                √ó
              </button>
            </div>

            <form onSubmit={handleCategorySubmit} className="space-y-4">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  {t('priceCalculator.categoryNameRequired')}
                </label>
                <input
                  type="text"
                  required
                  value={categoryFormData.name}
                  onChange={(e) => setCategoryFormData({ ...categoryFormData, name: e.target.value })}
                  className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  placeholder={t('priceCalculator.categoryNamePlaceholder')}
                />
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  {t('priceCalculator.description')}
                </label>
                <textarea
                  value={categoryFormData.description}
                  onChange={(e) => setCategoryFormData({ ...categoryFormData, description: e.target.value })}
                  rows={3}
                  className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  placeholder={t('priceCalculator.categoryDescriptionPlaceholder')}
                />
              </div>

              <div className="flex justify-end space-x-3 pt-4 border-t">
                <button
                  type="button"
                  onClick={() => {
                    setShowCategoryModal(false);
                    setCategoryFormData({ name: '', description: '' });
                    setError(null);
                  }}
                  className="px-6 py-2 bg-gray-200 text-gray-800 rounded-md hover:bg-gray-300 transition-colors font-medium"
                >
                  {t('priceCalculator.cancel')}
                </button>
                <button
                  type="submit"
                  className="px-6 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 transition-colors flex items-center space-x-2 font-semibold shadow-md"
                >
                  <span>üìÅ</span>
                  <span>{t('priceCalculator.addButton')}</span>
                </button>
              </div>
            </form>
          </div>
        </div>
      )}

      {/* Ïπ¥ÌÖåÍ≥†Î¶¨ Í¥ÄÎ¶¨ ÌåùÏóÖ Î™®Îã¨ */}
      {showCategoryManagementModal && (
        <div className="fixed inset-0 bg-black bg-opacity-60 overflow-y-auto h-full w-full z-50 flex items-center justify-center">
          <div className="relative mx-auto p-8 border w-[700px] shadow-2xl rounded-xl bg-white animate-in">
            <div className="flex justify-between items-center mb-8">
              <div className="flex items-center space-x-3">
                <div className="w-10 h-10 bg-blue-500 rounded-full flex items-center justify-center">
                  <span className="text-white text-xl">‚öôÔ∏è</span>
                </div>
                <div>
                  <h3 className="text-2xl font-bold text-gray-900">{t('priceCalculator.categoryManagement')}</h3>
                  <p className="text-sm text-gray-600">{t('priceCalculator.categoryManagementDescription')}</p>
                </div>
              </div>
              <button
                onClick={() => setShowCategoryManagementModal(false)}
                className="text-gray-400 hover:text-gray-600 hover:bg-gray-100 rounded-full p-2 transition-all"
              >
                <span className="text-2xl">√ó</span>
              </button>
            </div>

            <div className="space-y-6">
              {/* ÏÉà Ïπ¥ÌÖåÍ≥†Î¶¨ Ï∂îÍ∞Ä Î≤ÑÌäº */}
              <div className="flex justify-end">
                <button
                  onClick={() => {
                    setShowCategoryManagementModal(false);
                    setShowCategoryModal(true);
                  }}
                  className="bg-green-600 hover:bg-green-700 text-white px-4 py-2 rounded-lg transition-colors flex items-center space-x-2 font-semibold shadow-md"
                >
                  <span>‚ûï</span>
                  <span>{t('priceCalculator.addNewCategoryButton')}</span>
                </button>
              </div>

              {/* Ïπ¥ÌÖåÍ≥†Î¶¨ Î™©Î°ù */}
              <div className="space-y-3 max-h-96 overflow-y-auto">
                {categories.length === 0 ? (
                  <div className="text-center text-gray-500 py-8">
                    {t('priceCalculator.noCategories')}
                  </div>
                ) : (
                  categories.map(category => (
                    <div key={category.id} className="bg-gray-50 rounded-lg p-4 flex justify-between items-center">
                      <div className="flex-1">
                        <h4 className="font-semibold text-gray-900">{category.name}</h4>
                        <p className="text-sm text-gray-600">{category.description || t('priceCalculator.noDescription')}</p>
                        <div className="text-xs text-gray-500 mt-1">
                          {t('priceCalculator.tasks')}: {items.filter(item => item.categoryId === category.id).length}
                        </div>
                      </div>
                      <div className="flex space-x-2">
                        <button
                          onClick={() => {
                            setShowCategoryManagementModal(false);
                            handleEditCategory(category);
                          }}
                          className="bg-blue-600 hover:bg-blue-700 text-white px-3 py-1 rounded text-sm transition-colors font-medium shadow-sm"
                        >
                          ÏàòÏ†ï
                        </button>
                        <button
                          onClick={() => handleDeleteCategory(category)}
                          className="bg-red-600 hover:bg-red-700 text-white px-3 py-1 rounded text-sm transition-colors font-medium shadow-sm"
                        >
                          ÏÇ≠Ï†ú
                        </button>
                      </div>
                    </div>
                  ))
                )}
              </div>

              <div className="flex justify-end pt-6 border-t border-gray-200">
                <button
                  onClick={() => setShowCategoryManagementModal(false)}
                  className="px-6 py-3 bg-gray-300 text-gray-800 rounded-lg hover:bg-gray-400 transition-all font-semibold shadow-sm"
                >
                  Îã´Í∏∞
                </button>
              </div>
            </div>
          </div>
        </div>
      )}

      {/* Ïπ¥ÌÖåÍ≥†Î¶¨ ÏàòÏ†ï ÌåùÏóÖ Î™®Îã¨ */}
      {showEditCategoryModal && editingCategory && (
        <div className="fixed inset-0 bg-black bg-opacity-60 overflow-y-auto h-full w-full z-50 flex items-center justify-center">
          <div className="relative mx-auto p-8 border w-[500px] shadow-2xl rounded-xl bg-white animate-in">
            <div className="flex justify-between items-center mb-8">
              <div className="flex items-center space-x-3">
                <div className="w-10 h-10 bg-blue-500 rounded-full flex items-center justify-center">
                  <span className="text-white text-xl">‚úèÔ∏è</span>
                </div>
                <div>
                  <h3 className="text-2xl font-bold text-gray-900">Ïπ¥ÌÖåÍ≥†Î¶¨ ÏàòÏ†ï</h3>
                  <p className="text-sm text-gray-600">"{editingCategory.name}" Ïπ¥ÌÖåÍ≥†Î¶¨Î•º ÏàòÏ†ïÌï©ÎãàÎã§</p>
                </div>
              </div>
              <button
                onClick={() => {
                  setShowEditCategoryModal(false);
                  setEditingCategory(null);
                  setEditCategoryFormData({ name: '', description: '' });
                  setError(null);
                }}
                className="text-gray-400 hover:text-gray-600 hover:bg-gray-100 rounded-full p-2 transition-all"
              >
                <span className="text-2xl">√ó</span>
              </button>
            </div>

            <form onSubmit={handleEditCategorySubmit} className="space-y-6">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Ïπ¥ÌÖåÍ≥†Î¶¨Î™Ö *
                </label>
                <input
                  type="text"
                  required
                  value={editCategoryFormData.name}
                  onChange={(e) => setEditCategoryFormData({ ...editCategoryFormData, name: e.target.value })}
                  className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-all"
                  placeholder="Ïòà: ÎÇúÎ∞© ÏãúÏä§ÌÖú"
                />
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  ÏÑ§Î™Ö
                </label>
                <textarea
                  value={editCategoryFormData.description}
                  onChange={(e) => setEditCategoryFormData({ ...editCategoryFormData, description: e.target.value })}
                  rows={3}
                  className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-all"
                  placeholder="Ïπ¥ÌÖåÍ≥†Î¶¨Ïóê ÎåÄÌïú ÏÑ§Î™ÖÏùÑ ÏûÖÎ†•ÌïòÏÑ∏Ïöî..."
                />
              </div>

              <div className="flex justify-end space-x-4 pt-6 border-t border-gray-200">
                <button
                  type="button"
                  onClick={() => {
                    setShowEditCategoryModal(false);
                    setEditingCategory(null);
                    setEditCategoryFormData({ name: '', description: '' });
                    setError(null);
                  }}
                  className="px-6 py-3 bg-gray-200 text-gray-700 rounded-lg hover:bg-gray-300 transition-all font-medium"
                >
                  Ï∑®ÏÜå
                </button>
                <button
                  type="submit"
                  className="px-8 py-3 bg-blue-500 text-white rounded-lg hover:bg-blue-600 transition-all flex items-center space-x-2 font-medium shadow-lg hover:shadow-xl"
                >
                  <span>‚úèÔ∏è</span>
                  <span>ÏàòÏ†ï ÏôÑÎ£å</span>
                </button>
              </div>
            </form>
          </div>
        </div>
      )}

      {/* Îã®Í∞Ä ÏàòÏ†ï Î™®Îã¨ */}
      {showPriceModal.show && showPriceModal.item && (
        <div className="fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full z-50">
          <div className="relative top-20 mx-auto p-6 border w-[500px] shadow-lg rounded-md bg-blue-50">
            <div className="flex justify-between items-center mb-6">
              <h3 className="text-xl font-semibold text-gray-900">
                üí∞ Îã®Í∞Ä ÏàòÏ†ï: {showPriceModal.item.name}
              </h3>
              <button
                onClick={() => {
                  setPriceModalData({ show: false, item: null });
                  setFormattedPriceBaseCost('');
                }}
                className="text-gray-400 hover:text-gray-600 text-2xl"
              >
                √ó
              </button>
            </div>

            <form onSubmit={handlePriceSubmit} className="space-y-4">
              <div className="bg-gray-100 p-3 rounded-md">
                <div className="text-sm text-gray-600">
                  <div>ÏûëÏóÖÎ™Ö: <span className="font-medium">{showPriceModal.item.name}</span></div>
                  <div>ÌòÑÏû¨ ÏõêÍ∞Ä: <span className="font-medium text-red-600">{formatNumber(showPriceModal.item.baseCost || 0)} VND</span></div>
                  <div>ÌòÑÏû¨ ÌåêÎß§Í∞Ä: <span className="font-medium text-green-600">{formatNumber(showPriceModal.item.unitPrice)} VND</span></div>
                </div>
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  ÏÉà ÏõêÍ∞Ä (Í∏∞Ïà†Ïûê ÎπÑÏö©) *
                </label>
                <div className="relative">
                  <input
                    type="text"
                    required
                    value={formattedPriceBaseCost}
                    onChange={(e) => {
                      const formatted = formatInputValue(e.target.value);
                      setFormattedPriceBaseCost(formatted);
                      setPriceFormData({ ...priceFormData, baseCost: parseFormattedNumber(formatted) });
                    }}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-red-500"
                    placeholder="850.000"
                  />
                </div>
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Í≥ÑÏÇ∞Îêú ÏÉà ÌåêÎß§ Îã®Í∞Ä
                </label>
                <div className="relative">
                  <input
                    type="text"
                    value={formatNumber(priceFormData.calculatedPrice)}
                    readOnly
                    className="w-full px-3 py-2 border border-gray-300 rounded-md bg-green-50 text-green-700 font-bold"
                  />
                </div>
                {priceFormData.calculatedPrice > 0 && (
                  <div className="text-xs text-green-600 mt-2">
                    {formatNumber(priceFormData.calculatedPrice)} VND (ÏûêÎèô Í≥ÑÏÇ∞)
                  </div>
                )}
              </div>

              {/* ÏöîÏú® ÏÑ§Ï†ï */}
              <div className="bg-blue-50 p-4 rounded-lg border border-blue-200">
                <div className="font-medium text-blue-800 mb-3">‚öôÔ∏è Í≥ÑÏÇ∞ ÏöîÏú® ÏÑ§Ï†ï</div>
                <div className="grid grid-cols-3 gap-3">
                  <div>
                    <label className="block text-xs font-medium text-blue-700 mb-1">PIT (%)</label>
                    <input
                      type="number"
                      min="0"
                      max="100"
                      step="0.1"
                      value={priceCalculationRates.pitRate}
                      onChange={(e) => setPriceCalculationRates({...priceCalculationRates, pitRate: parseFloat(e.target.value) || 0})}
                      className="w-full px-2 py-1 text-sm border border-blue-300 rounded focus:outline-none focus:ring-1 focus:ring-blue-500"
                    />
                  </div>
                  <div>
                    <label className="block text-xs font-medium text-blue-700 mb-1">Í∏∞ÏóÖÏù¥Ïú§ (%)</label>
                    <input
                      type="number"
                      min="0"
                      max="100"
                      step="0.1"
                      value={priceCalculationRates.profitRate}
                      onChange={(e) => setPriceCalculationRates({...priceCalculationRates, profitRate: parseFloat(e.target.value) || 0})}
                      className="w-full px-2 py-1 text-sm border border-blue-300 rounded focus:outline-none focus:ring-1 focus:ring-blue-500"
                    />
                  </div>
                  <div>
                    <label className="block text-xs font-medium text-blue-700 mb-1">Î∂ÄÍ∞ÄÏÑ∏ (%)</label>
                    <input
                      type="number"
                      min="0"
                      max="100"
                      step="0.1"
                      value={priceCalculationRates.vatRate}
                      onChange={(e) => setPriceCalculationRates({...priceCalculationRates, vatRate: parseFloat(e.target.value) || 0})}
                      className="w-full px-2 py-1 text-sm border border-blue-300 rounded focus:outline-none focus:ring-1 focus:ring-blue-500"
                    />
                  </div>
                </div>
              </div>

              {priceFormData.baseCost > 0 && (
                <div className="bg-yellow-50 p-4 rounded-lg border border-yellow-200">
                  <div className="text-sm text-yellow-800">
                    <div className="font-medium mb-2">üí° ÏÉÅÏÑ∏ Í≥ÑÏÇ∞ Í≥ºÏ†ï:</div>
                    {(() => {
                      const details = getCalculationDetails(priceFormData.baseCost, priceCalculationRates);
                      return (
                        <div className="space-y-1">
                          <div>1. ÏõêÍ∞Ä: <strong>{formatNumber(details.baseCost)} VND</strong></div>
                          <div className="ml-4 text-xs">+ PIT {details.pitRate}%: +{formatNumber(Math.round(details.pitAmount))} VND</div>
                          <div>2. PIT Ï†ÅÏö© ÌõÑ: <strong>{formatNumber(Math.round(details.afterPIT))} VND</strong></div>
                          <div className="ml-4 text-xs">+ Í∏∞ÏóÖÏù¥Ïú§ {details.profitRate}%: +{formatNumber(Math.round(details.profitAmount))} VND</div>
                          <div>3. Í∏∞ÏóÖÏù¥Ïú§ Ï†ÅÏö© ÌõÑ: <strong>{formatNumber(Math.round(details.afterProfit))} VND</strong></div>
                          <div className="ml-4 text-xs">+ Î∂ÄÍ∞ÄÏÑ∏ {details.vatRate}%: +{formatNumber(Math.round(details.vatAmount))} VND</div>
                          <div className="border-t pt-1 mt-2">
                            <div>4. ÏµúÏ¢Ö ÌåêÎß§Í∞Ä (Î∂ÄÍ∞ÄÏÑ∏ Ìè¨Ìï®): <strong className="text-green-600">{formatNumber(details.finalPrice)} VND</strong></div>
                            <div className="text-blue-600 mt-1">üìã Í≤¨Ï†ÅÏÑúÏö© ÏàúÎã®Í∞Ä (Î∂ÄÍ∞ÄÏÑ∏ Ï†úÏô∏): <strong>{formatNumber(Math.round(details.afterProfit))} VND</strong></div>
                          </div>
                        </div>
                      );
                    })()}
                  </div>
                </div>
              )}

              <div className="flex justify-end space-x-3 pt-4 border-t">
                <button
                  type="button"
                  onClick={() => {
                  setPriceModalData({ show: false, item: null });
                  setFormattedPriceBaseCost('');
                }}
                  className="px-6 py-2 bg-gray-100 text-gray-700 rounded-md hover:bg-gray-200 transition-colors"
                >
                  Ï∑®ÏÜå
                </button>
                <button
                  type="submit"
                  className="px-6 py-2 bg-blue-500 text-white rounded-md hover:bg-blue-600 transition-colors flex items-center space-x-2"
                >
                  <span>Îã®Í∞Ä ÏóÖÎç∞Ïù¥Ìä∏</span>
                </button>
              </div>
            </form>
          </div>
        </div>
      )}
    </div>
  );
};

export default PriceCalculator;