📌 유지보수 견적 관리 시스템 개발 프로젝트
🎯 프로젝트 개요
역할: 당신은 경험 많은 풀스택 개발자입니다.
목표: 유지보수 업체 내부 직원용 웹 기반 견적 관리 시스템 MVP 개발
우선순위: 실용성 > 디자인, 안정성 > 고급기능
📋 핵심 기능 요구사항
1. 사용자 관리 (User Management)

인증 시스템: JWT 기반 로그인/로그아웃
권한 관리: 관리자(admin) / 일반직원(employee) 2단계
사용자 정보: 이름, 이메일, 비밀번호(bcrypt 암호화), 권한, 생성일
세션 관리: JWT 토큰 만료 처리, 자동 로그아웃

2. 고객 관리 (Customer Management)
javascript// 고객 데이터 모델
Customer: {
  id: string,
  customerName: string,     // 담당자명
  companyName: string,      // 회사명
  phone: string,
  email: string,
  addresses: [              // 복수 현장 주소 지원
    {
      id: string,
      name: string,         // 현장명 (예: "본사", "1공장")
      address: string,
      isMain: boolean
    }
  ],
  memo: text,
  createdAt: date,
  lastContactDate: date
}

CRUD 기능: 등록/조회/수정/삭제
검색 기능: 고객명, 회사명, 전화번호로 검색
히스토리 연결: 해당 고객의 견적/작업 이력 자동 표시

3. 견적 관리 (Quotation Management)
javascript// 견적 데이터 모델
Quotation: {
  id: string,
  quotationNumber: string,  // QT-YYYYMMDD-001 형식
  customerId: string,
  customerAddressId: string,
  status: enum ['draft', 'reviewed', 'sent', 'contracted', 'cancelled'],
  items: [
    {
      categoryId: string,    // 작업 카테고리 ID
      itemName: string,      // 작업 항목명
      quantity: number,
      unitPrice: number,
      amount: number         // quantity * unitPrice
    }
  ],
  materialCost: number,      // 자재비 합계
  laborCost: number,         // 인건비 합계
  travelCost: number,        // 출장비
  marginRate: number,        // 관리마진 % (기본 15%)
  subtotal: number,          // 세전 합계
  tax: number,               // 부가세 (10%)
  total: number,             // 최종 금액
  createdBy: string,         // 작성자 ID
  createdAt: date,
  sentAt: date,              // 발송일시
  validUntil: date           // 견적 유효기간 (기본 30일)
}
4. 단가표 관리 (Price Management) - 관리자 전용
javascript// 단가표 데이터 모델
PriceCategory: {
  id: string,
  name: string,              // 전기, 설비, 인테리어, 청소 등
  items: [
    {
      id: string,
      itemName: string,      // 작업 항목명
      unit: string,          // 단위 (건, 개, m², 시간 등)
      unitPrice: number,     // 단가
      laborHours: number,    // 기본 소요 시간
      isActive: boolean      // 활성/비활성
    }
  ]
}
5. 대시보드 (Dashboard)

실시간 현황: 오늘 견적 요청 건수, 진행중인 견적 수
월간 통계: 이번달 견적 건수, 예상 매출액, 계약 완료율
최근 활동: 최근 7일간 작성된 견적 목록
알림: 견적 유효기간 임박, 답변 대기중인 견적

⚙️ 기술 스택 (확정)
Frontend: React 18 + TypeScript + TailwindCSS + React Router + Axios
Backend: Node.js + Express + TypeScript + Prisma ORM
Database: PostgreSQL
Authentication: JWT + bcrypt
PDF Generation: jsPDF (클라이언트) + PDFKit (서버)
Email: Nodemailer (SMTP)
Development: Vite, ESLint, Prettier
🗂️ 프로젝트 구조
quotation-management/
├── frontend/
│   ├── src/
│   │   ├── components/         # 재사용 컴포넌트
│   │   ├── pages/             # 페이지 컴포넌트
│   │   ├── hooks/             # 커스텀 훅
│   │   ├── services/          # API 서비스
│   │   ├── types/             # TypeScript 타입 정의
│   │   └── utils/             # 유틸리티 함수
│   └── package.json
├── backend/
│   ├── src/
│   │   ├── routes/            # API 라우트
│   │   ├── middleware/        # 미들웨어
│   │   ├── services/          # 비즈니스 로직
│   │   ├── prisma/            # DB 스키마
│   │   └── utils/             # 유틸리티
│   └── package.json
└── docs/                      # API 문서, 설계서
🚀 개발 단계별 순서

Phase 1: 프로젝트 초기 설정 + DB 스키마 설계
Phase 2: 백엔드 API 개발 (인증, CRUD)
Phase 3: 프론트엔드 기본 화면 (로그인, 대시보드)
Phase 4: 고객 관리 기능
Phase 5: 견적 생성/관리 기능
Phase 6: PDF 생성 및 최종 테스트

🎨 UI/UX 가이드라인

디자인 원칙: 직관적 > 화려함, 업무 효율성 최우선
색상: 기본 파란색 계열, 성공(초록), 경고(노랑), 위험(빨강)
레이아웃: 사이드바 네비게이션, 상단 헤더(사용자 정보)
반응형: 최소 1280px 데스크탑 기준, 태블릿 호환
접근성: 키보드 네비게이션, 적절한 대비율

📝 추가 요구사항

데이터 유효성 검사: 프론트엔드/백엔드 양쪽 검증
에러 핸들링: 사용자 친화적 에러 메시지
로딩 상태: 모든 비동기 작업에 로딩 인디케이터
데이터 백업: PostgreSQL 자동 백업 설정
환경 변수: 개발/프로덕션 환경 분리